/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "YEAR"
      | "borrow"
      | "borrowerLoans"
      | "calculateOwed"
      | "collaterals"
      | "depositNFT"
      | "fundPool"
      | "liquidateLoan"
      | "loanCount"
      | "loanToken"
      | "loans"
      | "ltvPercent"
      | "onERC721Received"
      | "oracle"
      | "owner"
      | "renounceOwnership"
      | "repayLoan"
      | "setLTV"
      | "transferOwnership"
      | "withdrawCollateral"
      | "withdrawPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrowed"
      | "Liquidated"
      | "NFTDeposited"
      | "OwnershipTransferred"
      | "Repaid"
  ): EventFragment;

  encodeFunctionData(functionFragment: "YEAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerLoans",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOwed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loanCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ltvPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLTV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPool",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "YEAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ltvPercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPool",
    data: BytesLike
  ): Result;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [loanId: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [loanId: BigNumberish, liquidator: AddressLike];
  export type OutputTuple = [loanId: bigint, liquidator: string];
  export interface OutputObject {
    loanId: bigint;
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    nft: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [user: string, nft: string, tokenId: bigint];
  export interface OutputObject {
    user: string;
    nft: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [loanId: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): LendingProtocol;
  waitForDeployment(): Promise<this>;

  interface: LendingProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  YEAR: TypedContractMethod<[], [bigint], "view">;

  borrow: TypedContractMethod<
    [
      amount: BigNumberish,
      duration: BigNumberish,
      interestRateBP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrowerLoans: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  calculateOwed: TypedContractMethod<[loanId: BigNumberish], [bigint], "view">;

  collaterals: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        nftAddress: string;
        tokenId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  depositNFT: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundPool: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  liquidateLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  loanCount: TypedContractMethod<[], [bigint], "view">;

  loanToken: TypedContractMethod<[], [string], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        borrower: string;
        nftAddress: string;
        tokenId: bigint;
        principal: bigint;
        startTime: bigint;
        duration: bigint;
        interestRateBP: bigint;
        repaid: boolean;
        liquidated: boolean;
      }
    ],
    "view"
  >;

  ltvPercent: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayLoan: TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;

  setLTV: TypedContractMethod<
    [_ltvPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPool: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      duration: BigNumberish,
      interestRateBP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowerLoans"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateOwed"
  ): TypedContractMethod<[loanId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "collaterals"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        nftAddress: string;
        tokenId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositNFT"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidateLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loanCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        borrower: string;
        nftAddress: string;
        tokenId: bigint;
        principal: bigint;
        startTime: bigint;
        duration: bigint;
        interestRateBP: bigint;
        repaid: boolean;
        liquidated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ltvPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLTV"
  ): TypedContractMethod<[_ltvPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTDeposited"
  ): TypedContractEvent<
    NFTDepositedEvent.InputTuple,
    NFTDepositedEvent.OutputTuple,
    NFTDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;

  filters: {
    "Borrowed(uint256,address,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "Liquidated(uint256,address)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "NFTDeposited(address,address,uint256)": TypedContractEvent<
      NFTDepositedEvent.InputTuple,
      NFTDepositedEvent.OutputTuple,
      NFTDepositedEvent.OutputObject
    >;
    NFTDeposited: TypedContractEvent<
      NFTDepositedEvent.InputTuple,
      NFTDepositedEvent.OutputTuple,
      NFTDepositedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Repaid(uint256,address,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
  };
}
